#!/usr/bin/env -S deno run --allow-net --allow-read=. --allow-write=. --no-check

// Takes a strava.com public activity url and generates a markdown blog post entry from it

import { warnfull } from 'https://av.prod.archive.org/js/util/log.js'
import dayjs from 'https://esm.archive.org/dayjs'

const URL = 'https://www.strava.com/activities/8546316583' // xxx

const htm = Deno.readTextFileSync('strava.htm') || await (await fetch(URL)).text()

const { activity, photos } = JSON.parse(htm.match(/data-react-props='([^']+)/)?.pop().replace(/&quot;/g, '"'))

delete activity.streams.altitude
delete activity.streams.distance
delete activity.streams.latlng
warnfull(activity)

const slug = activity.name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-+/, '').replace(/-+$/, '')

const ymd = dayjs(activity.date).format('YYYY-MM-DD')
const YYYY = ymd.split('-').slice(0, 1)
const MM = ymd.split('-').slice(1, 2)
const info = Object.fromEntries(['distance', 'time', 'elevation', 'calories'].map(k => [k, activity[k]]))
warnfull({ info, slug, ymd, YYYY, MM })



const FILE = `${MM}-${slug}.md`
Deno.mkdirSync('img', { recursive: true })

Deno.writeTextFileSync(FILE, `---
title: ${activity.name}
date: ${ymd}
categories:
  - biking
  - pictures
tags:
  - biking
  - gravel bike
  - candy
featured: ${slug}-01.jpg
---
Description xxx

<style>.content img { display: block }</style>

`)

warnfull(photos)

for (const [n, pix] of Object.entries(photos)) {
  const n0 = String(n).padStart(2, 0)

  warnfull(pix.urls)
  const pixdata = await (await fetch(Object.values(pix.urls).pop())).arrayBuffer()

  const IMGFI = `img/${slug}-${n0}.jpg`

  Deno.writeTextFileSync(
    FILE,
    `<img src="/post/'${YYYY}'/${IMGFI}">\n${pix.caption ?? ''}\n\n`,
    { append: true }
  )

  Deno.writeFileSync(IMGFI, new Uint8Array(pixdata))
}
